# -*- coding: utf-8 -*-
"""
Created on Sat Nov 05 16:09:58 2016

@author: vishayv and provided
python 2.7
"""




"""
Provide code and solution for Application 4
"""

DESKTOP = True

import math
import random
import urllib2

if DESKTOP:
    import matplotlib.pyplot as plt
    import dynamicAlignmentP4 as student
else:
    import simpleplot
    import userXX_XXXXXXX as student
    

# URLs for data files
PAM50_URL = "http://storage.googleapis.com/codeskulptor-alg/alg_PAM50.txt"
HUMAN_EYELESS_URL = "http://storage.googleapis.com/codeskulptor-alg/alg_HumanEyelessProtein.txt"
FRUITFLY_EYELESS_URL = "http://storage.googleapis.com/codeskulptor-alg/alg_FruitflyEyelessProtein.txt"
CONSENSUS_PAX_URL = "http://storage.googleapis.com/codeskulptor-alg/alg_ConsensusPAXDomain.txt"
WORD_LIST_URL = "http://storage.googleapis.com/codeskulptor-assets/assets_scrabble_words3.txt"



###############################################
# provided code

def read_scoring_matrix(filename):
    """
    Read a scoring matrix from the file named filename.  

    Argument:
    filename -- name of file containing a scoring matrix

    Returns:
    A dictionary of dictionaries mapping X and Y characters to scores
    """
    scoring_dict = {}
    scoring_file = urllib2.urlopen(filename)
    ykeys = scoring_file.readline()
    ykeychars = ykeys.split()
    for line in scoring_file.readlines():
        vals = line.split()
        xkey = vals.pop(0)
        scoring_dict[xkey] = {}
        for ykey, val in zip(ykeychars, vals):
            scoring_dict[xkey][ykey] = int(val)
    return scoring_dict




def read_protein(filename):
    """
    Read a protein sequence from the file named filename.

    Arguments:
    filename -- name of file containing a protein sequence

    Returns:
    A string representing the protein
    """
    protein_file = urllib2.urlopen(filename)
    protein_seq = protein_file.read()
    protein_seq = protein_seq.rstrip()
    return protein_seq


def read_words(filename):
    """
    Load word list from the file named filename.

    Returns a list of strings.
    """
    # load assets
    word_file = urllib2.urlopen(filename)
    
    # read in files as string
    words = word_file.read()
    
    # template lines and solution lines list of line string
    word_list = words.split('\n')
    print "Loaded a dictionary with", len(word_list), "words"
    return word_list

def delete_dash_str(prot_seq, char_del):
    """
    takes a seq and a char to be deleted and deletes
    that sequence
    """
    return prot_seq.replace(char_del, "")
    
def calc_similarity(seq_x, seq_y):
    """
    calc the % similarity between two sequences
    """
    assert len(seq_x) == len(seq_y)
    str_len = len(seq_x)
    match_count = 0
    for idx in range(str_len):
        if(seq_x[idx]==seq_y[idx]):
            match_count +=1
            
    return match_count/float(str_len)
    
def generate_null_distribution(seq_x, seq_y, score_matrix, num_trials):
    """
    returns a scoring distribution that us un-normalized distribution
    that is generated by performing the following process numtrials times:
    Generate a random permutation rand_y of the sequence seq_y using random.shuffle().
    Compute the maximum value score for the local alignment of seq_x and rand_y using the score matrix scoring_matrix.
    Increment the entry score in the dictionary scoring_distribution by one.
    """
    #lst_y = list(seq_y)
    scoring_dist = {}
    for _ in range(num_trials):
        lst_y = list(seq_y)
        random.shuffle(lst_y)
        rand_y = "".join(lst_y)
        align_matrix = student.compute_alignment_matrix(seq_x,rand_y, score_matrix,False)
        local_tup = student.compute_local_alignment(seq_x, rand_y, score_matrix, align_matrix)
        score = local_tup[0]
        if score in scoring_dist:
            scoring_dist[score] += 1
        else:
            scoring_dist[score] = 1
    return scoring_dist
    
def plot_bar(yvals ,xvals, x_axis_l, y_axis_l, title):
    
    plt.title('Desktop python 2.7 : ' + title)
    plt.bar(xvals, yvals, color='r')
    #plt.plot(xvals, yvals1, '-b', label=leg_label1)
    #plt.plot(xvals, yvals2, '-r', label=leg_label2)
    plt.xlabel(x_axis_l)
    plt.ylabel(y_axis_l)
    plt.legend(loc='upper left')
    plt.show()

def check_spelling(checked_word, dist, word_list):
    """
    returns list of words with dist editance from the 
    checked word
    """
    #make sure both words are in lower case 
   
    checked_word = checked_word.lower()
    ret_list = []    
    checked_word_len = len(checked_word)
    score_matrix = student.build_scoring_matrix(set(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']),2,1,0)
    
    for word in word_list:
        word = word.lower()
        score_align = student.compute_alignment_matrix(checked_word, word, score_matrix, True)
        score_tup  = student.compute_global_alignment(checked_word, word,score_matrix, score_align)
        if((checked_word_len + len(word)  - score_tup[0]) <= dist):  
            ret_list.append(word)
    return ret_list
#print gen_random_clusters(10)


# Question 1    
human_eyeless_prot= read_protein(HUMAN_EYELESS_URL)
print len(human_eyeless_prot)
fruitFly_eyeless_prot = read_protein(FRUITFLY_EYELESS_URL)
pax_domain_prot = read_protein(CONSENSUS_PAX_URL)
scoring_matrix = read_scoring_matrix(PAM50_URL)  
word_list = read_words(WORD_LIST_URL)  
align_matrix = student.compute_alignment_matrix(human_eyeless_prot,fruitFly_eyeless_prot, scoring_matrix,False)
global_align_matrix = student.compute_alignment_matrix(human_eyeless_prot,fruitFly_eyeless_prot, scoring_matrix,True)
global_ans_tup = student.compute_global_alignment(human_eyeless_prot,fruitFly_eyeless_prot, scoring_matrix, global_align_matrix)
ans_tup = student.compute_local_alignment(human_eyeless_prot,fruitFly_eyeless_prot, scoring_matrix, align_matrix)
print ans_tup
print "score=",ans_tup[0],"human_align=",ans_tup[1],"fly_align=",ans_tup[2]
human_fly_local_score = ans_tup[0]
human_local = ans_tup[1]
fly_local = ans_tup[2]
print len(human_local)
#print global_ans_tup
# Question 2 and 3
human_pax = delete_dash_str(human_local, '-')
fly_pax = delete_dash_str(fly_local, '-')
print "no dash fly",fly_pax
print "no dash human",human_pax
pax_fly_align_matrix = student.compute_alignment_matrix(fly_pax,pax_domain_prot, scoring_matrix,True)
pax_human_align_matrix = student.compute_alignment_matrix(human_pax,pax_domain_prot, scoring_matrix,True)
global_fly_pax_ans_tup = student.compute_global_alignment(fly_pax,pax_domain_prot, scoring_matrix, pax_fly_align_matrix)
global_human_pax_ans_tup = student.compute_global_alignment(human_pax,pax_domain_prot, scoring_matrix, pax_human_align_matrix)
print "fly+pax",global_fly_pax_ans_tup
print "human+pax",global_human_pax_ans_tup
print calc_similarity("ABCD","ABDD")
print calc_similarity(global_fly_pax_ans_tup[1],global_fly_pax_ans_tup[2])
print calc_similarity(global_human_pax_ans_tup[1],global_human_pax_ans_tup[2])

#Question 4
"""
dist = generate_null_distribution(human_eyeless_prot, fruitFly_eyeless_prot, scoring_matrix, 1000)
print dist
x_axis = dist.keys()
print x_axis
y_axis = [dist[key] for key in x_axis]
print y_axis
sum_score = sum(y_axis)
print 'sum score',sum_score
y_axis_normal = map(lambda score:score/float(sum_score), y_axis)

print y_axis_normal
title = "Desktop python 2.7 : Scoring distribution of aligning a random eyeless protein sequence with humaneyeless seq"
blue_plot = "slow_cp"
red_plot = "fast_cp"
x_axis_l = 'Global Alignment Scores'
y_axis_l = 'Fraction of total trials'
plot_bar(y_axis_normal, x_axis, x_axis_l, y_axis_l, title)
print dist
"""
null_dist_dict = {39: 1, 40: 6, 41: 13, 42: 23, 43: 32, 44: 43, 45: 47, 46: 59, 47: 65, 48: 67, 49: 70, 50: 69, 51: 73, 52: 65, 53: 60, 54: 41, 55: 37, 56: 31, 57: 22, 58: 23, 59: 25, 60: 23, 61: 16, 62: 15, 63: 11, 64: 12, 65: 7, 66: 6, 67: 3, 68: 6, 69: 4, 70: 8, 71: 3, 72: 2, 73: 1, 74: 1, 75: 3, 79: 1, 80: 1, 82: 1, 84: 2, 85: 1, 90: 1}
#null_dist_score = null_dist_dict.keys()
null_dist_score = []
for key in null_dist_dict:
    for _ in range(null_dist_dict[key]):
        null_dist_score.append(key)
#null_dist_score = [9, 2, 5, 4, 12, 7, 8, 11, 9, 3, 7, 4, 12, 5, 4, 10, 9, 6, 9, 4]
mean = sum(null_dist_score)/float(len(null_dist_score))
print "mean:"+str(mean)
std_dev_sub = map(lambda score: (score-mean)**2,null_dist_score)
std_dev_two = sum(std_dev_sub)/float(len(std_dev_sub))
std_dev = math.sqrt(std_dev_two)
print "std:"+str(std_dev)
z_score = (human_fly_local_score - mean)/std_dev
print "zscore",str(z_score)


#question 7 & 8
print check_spelling("humble",1,word_list)
print check_spelling("firefly",2,word_list)


